// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<CANTalon> RobotMap::drivebaseMotorFR;
std::shared_ptr<CANTalon> RobotMap::drivebaseMotorFL;
std::shared_ptr<CANTalon> RobotMap::drivebaseMotorBR;
std::shared_ptr<CANTalon> RobotMap::drivebaseMotorBL;
std::shared_ptr<RobotDrive> RobotMap::drivebaseRobotDrive41;
std::shared_ptr<CANTalon> RobotMap::shooterMotorMCIMFrontFlywheel;
std::shared_ptr<CANTalon> RobotMap::shooterMotorMCIMRearFlywheel;
std::shared_ptr<DoubleSolenoid> RobotMap::shooterSolenoidShooterLift;
std::shared_ptr<CANTalon> RobotMap::intakeMotorSBFrontRoller;
std::shared_ptr<CANTalon> RobotMap::intakeMotorSBRearRoller;
std::shared_ptr<DoubleSolenoid> RobotMap::frontArmsSolenoidLeftArm;
std::shared_ptr<DoubleSolenoid> RobotMap::frontArmsSolenoidRightArm;
std::shared_ptr<Compressor> RobotMap::compressorCompressor1;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    LiveWindow *lw = LiveWindow::GetInstance();

    drivebaseMotorFR.reset(new CANTalon(3));
    lw->AddActuator("Drivebase", "MotorFR", drivebaseMotorFR);
    
    drivebaseMotorFL.reset(new CANTalon(1));
    lw->AddActuator("Drivebase", "MotorFL", drivebaseMotorFL);
    
    drivebaseMotorBR.reset(new CANTalon(4));
    lw->AddActuator("Drivebase", "MotorBR", drivebaseMotorBR);
    
    drivebaseMotorBL.reset(new CANTalon(2));
    lw->AddActuator("Drivebase", "MotorBL", drivebaseMotorBL);
    
    drivebaseRobotDrive41.reset(new RobotDrive(drivebaseMotorFR, drivebaseMotorFL,
              drivebaseMotorBR, drivebaseMotorBL));
    
    drivebaseRobotDrive41->SetSafetyEnabled(true);
        drivebaseRobotDrive41->SetExpiration(0.1);
        drivebaseRobotDrive41->SetSensitivity(0.5);
        drivebaseRobotDrive41->SetMaxOutput(1.0);

    shooterMotorMCIMFrontFlywheel.reset(new CANTalon(5));
    lw->AddActuator("Shooter", "MotorMCIMFrontFlywheel", shooterMotorMCIMFrontFlywheel);
    
    shooterMotorMCIMRearFlywheel.reset(new CANTalon(6));
    lw->AddActuator("Shooter", "MotorMCIMRearFlywheel", shooterMotorMCIMRearFlywheel);
    
    shooterSolenoidShooterLift.reset(new DoubleSolenoid(0, 0, 1));
    lw->AddActuator("Shooter", "SolenoidShooterLift", shooterSolenoidShooterLift);
    
    intakeMotorSBFrontRoller.reset(new CANTalon(8));
    lw->AddActuator("Intake", "MotorSBFrontRoller", intakeMotorSBFrontRoller);
    
    intakeMotorSBRearRoller.reset(new CANTalon(7));
    lw->AddActuator("Intake", "MotorSBRearRoller", intakeMotorSBRearRoller);
    
    frontArmsSolenoidLeftArm.reset(new DoubleSolenoid(0, 4, 5));
    lw->AddActuator("Front Arms", "SolenoidLeftArm", frontArmsSolenoidLeftArm);
    
    frontArmsSolenoidRightArm.reset(new DoubleSolenoid(0, 2, 3));
    lw->AddActuator("Front Arms", "SolenoidRightArm", frontArmsSolenoidRightArm);
    
    compressorCompressor1.reset(new Compressor(0));
    
    

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
