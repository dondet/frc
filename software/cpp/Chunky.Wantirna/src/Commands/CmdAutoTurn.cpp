// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "CmdAutoTurn.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

CmdAutoTurn::CmdAutoTurn(double Power, double Angle): Command() {
    m_Power = Power;
    m_Angle = Angle;
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::subDriveBase.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void CmdAutoTurn::Initialize() {
	startangle = Robot::subDriveBase->GetAngle();
    //    Robot::subDriveBase->ResetAngle();
    // sensor correction required because 360 degree turn is actually turning
	// robot by slightly more than required
	sensorcorrection = 0.965;
    correctedangle = m_Angle * sensorcorrection;
}

// Called repeatedly when this Command is scheduled to run
void CmdAutoTurn::Execute() {
    double gyro = Robot::subDriveBase->GetAngle();
    double anglenow = gyro - startangle;
    double delta =  correctedangle - anglenow;
    double power;
    double powerdownthreshold = 5;
    if( ( delta > powerdownthreshold ) || ( delta < -powerdownthreshold ) )
    {
        // set he power to the desired power
    	power = m_Power;
    }
    else
    {
    	// lets decrease the power as we approach the target angle ...
    	power = m_Power / 2;
    }
    if( delta > 0 )
    {
    	// we are heading in the right direction, keep going ...
        Robot::subDriveBase->Drive( power, -1.0 );
    }
    else
    {
        // we have over shot, go back the other way ...
        Robot::subDriveBase->Drive( power, 1.0 );
    }

}

// Make this return true when this Command no longer needs to run execute()
bool CmdAutoTurn::IsFinished() {
	double gyro = Robot::subDriveBase->GetAngle();
    double anglenow = gyro - startangle;
    SmartDashboard::PutNumber("Gyro", gyro);
    SmartDashboard::PutNumber("Angle now", anglenow);
    double delta = correctedangle - anglenow;
    SmartDashboard::PutNumber("Delta", delta);
    SmartDashboard::PutNumber("Corrected Angle", correctedangle);
    double allowederror = 0.5;
    return ( ( delta < allowederror ) && ( delta > -allowederror ) );
}

// Called once after isFinished returns true
void CmdAutoTurn::End() {
    Robot::subDriveBase->Stop();
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void CmdAutoTurn::Interrupted() {
    End();
}
