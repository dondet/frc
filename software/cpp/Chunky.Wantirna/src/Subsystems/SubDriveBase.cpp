// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "SubDriveBase.h"
#include "../RobotMap.h"
#include "../Commands/CmdJoystickDrive.h"
#include <ADXRs450_gyro.h>

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

SubDriveBase::SubDriveBase() : Subsystem("SubDriveBase") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    tnxRightMaster = RobotMap::subDriveBaseTnxRightMaster;
    tnxLeftMaster = RobotMap::subDriveBaseTnxLeftMaster;
    robotDriveTwo = RobotMap::subDriveBaseRobotDriveTwo;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // Setup network tables ...
    tnxLeftSlave = RobotMap::subDriveBaseTnxLeftSlave;
    tnxRightSlave = RobotMap::subDriveBaseTnxRightSlave;
    jetsonNetworkTable = NetworkTable::GetTable("JETSON");

    gyro = RobotMap::subDriveBaseGyro;
}

void SubDriveBase::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        SetDefaultCommand(new CmdJoystickDrive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.

void SubDriveBase::TakeJoystickInputs( std::shared_ptr<Joystick> stick ) {
	double throttle;
	throttle = (((stick->GetThrottle() + 1 ) / 4 )*-1 ) +1; // <-- Ben's awesomeness
	robotDriveTwo->ArcadeDrive( -stick->GetY() * throttle, -stick->GetX() * throttle );
}

void SubDriveBase::Drive(double power, double direction){
    robotDriveTwo->Drive(power, direction);
}

void SubDriveBase::Stop() {
	robotDriveTwo->Drive(0,0);
}

double SubDriveBase::GetLeftEncoderPosition() {
    return tnxLeftMaster->GetPosition();
}

double SubDriveBase::GetRightEncoderPosition() {
    return tnxRightMaster->GetPosition();
}

double SubDriveBase::GetAngle(){
	return SubDriveBase::gyro->GetAngle();
}

void SubDriveBase::ResetAngle(){
	SubDriveBase::gyro->Reset();
}

double SubDriveBase::GetPegX() {
    return jetsonNetworkTable->GetNumber( "pegx", 0.0 );
}

double SubDriveBase::GetPegY() {
    return jetsonNetworkTable->GetNumber( "pegy", 0.0 );
}

double SubDriveBase::GetPegRange() {
    return jetsonNetworkTable->GetNumber( "pegrange", 0.0 );
}
