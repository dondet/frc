// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"
#include "CANTalon.h"

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "ADXRs450_gyro.h"
#include "WPILib.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<CANTalon> RobotMap::subDriveBaseTnxRightMaster;
std::shared_ptr<CANTalon> RobotMap::subDriveBaseTnxLeftMaster;
std::shared_ptr<RobotDrive> RobotMap::subDriveBaseRobotDriveTwo;
std::shared_ptr<Servo> RobotMap::subGearCatcherSrvFlap1;
std::shared_ptr<Servo> RobotMap::subGearCatcherSrvFlap2;
std::shared_ptr<AnalogInput> RobotMap::subGearCatcherAngUltrasonicSensor;
std::shared_ptr<SpeedController> RobotMap::subClimberSpkClimber;
std::shared_ptr<CANTalon> RobotMap::subShooterTnxShooterTop;
std::shared_ptr<CANTalon> RobotMap::subShooterTnxShooterBottom;
std::shared_ptr<CANTalon> RobotMap::subIntakeTnxIntakeRollers;
std::shared_ptr<CANTalon> RobotMap::subIntakeTnxIntakeSliders;
std::shared_ptr<DigitalInput> RobotMap::subIntakeLswSliderIn;
std::shared_ptr<DigitalInput> RobotMap::subIntakeLswSliderOut;
std::shared_ptr<SpeedController> RobotMap::subFeederVspFeederWheels;
std::shared_ptr<SpeedController> RobotMap::subFeederVspAgitatorPaddles;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

std::shared_ptr<CANTalon> RobotMap::subDriveBaseTnxLeftSlave;
std::shared_ptr<CANTalon> RobotMap::subDriveBaseTnxRightSlave;
std::shared_ptr<ADXRS450_Gyro> RobotMap::subDriveBaseGyro;

void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    LiveWindow *lw = LiveWindow::GetInstance();

    subDriveBaseTnxRightMaster.reset(new CANTalon(3));
    lw->AddActuator("SubDriveBase", "TnxRightMaster", subDriveBaseTnxRightMaster);
    
    subDriveBaseTnxLeftMaster.reset(new CANTalon(1));
    lw->AddActuator("SubDriveBase", "TnxLeftMaster", subDriveBaseTnxLeftMaster);
    
    subDriveBaseRobotDriveTwo.reset(new RobotDrive(subDriveBaseTnxLeftMaster, subDriveBaseTnxRightMaster));
    
    subDriveBaseRobotDriveTwo->SetSafetyEnabled(true);
        subDriveBaseRobotDriveTwo->SetExpiration(0.1);
        subDriveBaseRobotDriveTwo->SetSensitivity(0.5);
        subDriveBaseRobotDriveTwo->SetMaxOutput(1.0);

    subGearCatcherSrvFlap1.reset(new Servo(2));
    lw->AddActuator("SubGearCatcher", "SrvFlap1", subGearCatcherSrvFlap1);
    
    subGearCatcherSrvFlap2.reset(new Servo(3));
    lw->AddActuator("SubGearCatcher", "SrvFlap2", subGearCatcherSrvFlap2);
    
    subGearCatcherAngUltrasonicSensor.reset(new AnalogInput(1));
    lw->AddSensor("SubGearCatcher", "AngUltrasonicSensor", subGearCatcherAngUltrasonicSensor);
    
    subClimberSpkClimber.reset(new Spark(4));
    lw->AddActuator("SubClimber", "SpkClimber", std::static_pointer_cast<Spark>(subClimberSpkClimber));
    
    subShooterTnxShooterTop.reset(new CANTalon(5));
    lw->AddActuator("SubShooter", "TnxShooterTop", subShooterTnxShooterTop);
    
    subShooterTnxShooterBottom.reset(new CANTalon(6));
    lw->AddActuator("SubShooter", "TnxShooterBottom", subShooterTnxShooterBottom);
    
    subIntakeTnxIntakeRollers.reset(new CANTalon(7));
    lw->AddActuator("SubIntake", "TnxIntakeRollers", subIntakeTnxIntakeRollers);
    
    subIntakeTnxIntakeSliders.reset(new CANTalon(8));
    lw->AddActuator("SubIntake", "TnxIntakeSliders", subIntakeTnxIntakeSliders);
    
    subIntakeLswSliderIn.reset(new DigitalInput(0));
    lw->AddSensor("SubIntake", "LswSliderIn", subIntakeLswSliderIn);
    
    subIntakeLswSliderOut.reset(new DigitalInput(1));
    lw->AddSensor("SubIntake", "LswSliderOut", subIntakeLswSliderOut);
    
    subFeederVspFeederWheels.reset(new VictorSP(0));
    lw->AddActuator("SubFeeder", "VspFeederWheels", std::static_pointer_cast<VictorSP>(subFeederVspFeederWheels));
    
    subFeederVspAgitatorPaddles.reset(new VictorSP(1));
    lw->AddActuator("SubFeeder", "VspAgitatorPaddles", std::static_pointer_cast<VictorSP>(subFeederVspAgitatorPaddles));
    


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    //Create encoders on master drive motors
    subDriveBaseTnxLeftMaster->SetFeedbackDevice(CANTalon::CtreMagEncoder_Relative);
    subDriveBaseTnxRightMaster->SetFeedbackDevice(CANTalon::CtreMagEncoder_Relative);
    subDriveBaseTnxLeftMaster->SetSensorDirection(true);
    subDriveBaseTnxRightMaster->SetSensorDirection(false);
    subDriveBaseTnxLeftMaster->SetPosition(0);
    subDriveBaseTnxRightMaster->SetPosition(0);

    //Make Rear drive motors followers
    subDriveBaseTnxLeftSlave.reset(new CANTalon(2));
    lw->AddActuator("SubDriveBase", "TnxLeftSlave", subDriveBaseTnxLeftSlave);

    subDriveBaseTnxRightSlave.reset(new CANTalon(4));
    lw->AddActuator("SubDriveBase", "TnxRightSlave", subDriveBaseTnxRightSlave);

    subDriveBaseTnxLeftSlave->SetControlMode(CANSpeedController::kFollower);
    subDriveBaseTnxLeftSlave->Set(1);
    subDriveBaseTnxRightSlave->SetControlMode(CANSpeedController::kFollower);
    subDriveBaseTnxRightSlave->Set(3);

    //Create and calibrate gyroscope
    subDriveBaseGyro.reset(new ADXRS450_Gyro);
    lw->AddSensor("SubDriveBase", "Gyro", subDriveBaseGyro);
    subDriveBaseGyro->Calibrate();


}
