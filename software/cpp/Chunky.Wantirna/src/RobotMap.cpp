// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"
#include "CANTalon.h"

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<SpeedController> RobotMap::subDriveBaseSpeedControllerRight;
std::shared_ptr<SpeedController> RobotMap::subDriveBaseSpeedControllerLeft;
std::shared_ptr<RobotDrive> RobotMap::subDriveBaseRobotDrive;
std::shared_ptr<Servo> RobotMap::subGearCatcherSrvFlap1;
std::shared_ptr<Servo> RobotMap::subGearCatcherSrvFlap2;
std::shared_ptr<SpeedController> RobotMap::subClimberSpkClimber;
std::shared_ptr<CANTalon> RobotMap::subShooterTnxShooterTop;
std::shared_ptr<CANTalon> RobotMap::subShooterTnxShooterBottom;
std::shared_ptr<CANTalon> RobotMap::subIntakeTnxIntakeRollers;
std::shared_ptr<CANTalon> RobotMap::subIntakeTnxIntakeSliders;
std::shared_ptr<SpeedController> RobotMap::subFeederVspFeederWheels;
std::shared_ptr<SpeedController> RobotMap::subFeederVspAgitatorPaddles;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    LiveWindow *lw = LiveWindow::GetInstance();

    subDriveBaseSpeedControllerRight.reset(new Talon(1));
    lw->AddActuator("SubDriveBase", "SpeedControllerRight", std::static_pointer_cast<Talon>(subDriveBaseSpeedControllerRight));
    
    subDriveBaseSpeedControllerLeft.reset(new Talon(0));
    lw->AddActuator("SubDriveBase", "SpeedControllerLeft", std::static_pointer_cast<Talon>(subDriveBaseSpeedControllerLeft));
    
    subDriveBaseRobotDrive.reset(new RobotDrive(subDriveBaseSpeedControllerLeft, subDriveBaseSpeedControllerRight));
    
    subDriveBaseRobotDrive->SetSafetyEnabled(true);
        subDriveBaseRobotDrive->SetExpiration(0.1);
        subDriveBaseRobotDrive->SetSensitivity(0.5);
        subDriveBaseRobotDrive->SetMaxOutput(1.0);

    subGearCatcherSrvFlap1.reset(new Servo(2));
    lw->AddActuator("SubGearCatcher", "SrvFlap1", subGearCatcherSrvFlap1);
    
    subGearCatcherSrvFlap2.reset(new Servo(4));
    lw->AddActuator("SubGearCatcher", "SrvFlap2", subGearCatcherSrvFlap2);
    
    subClimberSpkClimber.reset(new Spark(3));
    lw->AddActuator("SubClimber", "SpkClimber", std::static_pointer_cast<Spark>(subClimberSpkClimber));
    
    subShooterTnxShooterTop.reset(new CANTalon(1));
    lw->AddActuator("SubShooter", "TnxShooterTop", subShooterTnxShooterTop);
    
    subShooterTnxShooterBottom.reset(new CANTalon(2));
    lw->AddActuator("SubShooter", "TnxShooterBottom", subShooterTnxShooterBottom);
    
    subIntakeTnxIntakeRollers.reset(new CANTalon(0));
    lw->AddActuator("SubIntake", "TnxIntakeRollers", subIntakeTnxIntakeRollers);
    
    subIntakeTnxIntakeSliders.reset(new CANTalon(3));
    lw->AddActuator("SubIntake", "TnxIntakeSliders", subIntakeTnxIntakeSliders);
    
    subFeederVspFeederWheels.reset(new VictorSP(5));
    lw->AddActuator("SubFeeder", "VspFeederWheels", std::static_pointer_cast<VictorSP>(subFeederVspFeederWheels));
    
    subFeederVspAgitatorPaddles.reset(new VictorSP(6));
    lw->AddActuator("SubFeeder", "VspAgitatorPaddles", std::static_pointer_cast<VictorSP>(subFeederVspAgitatorPaddles));
    


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
