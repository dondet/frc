// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"
#include "CANTalon.h"

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<SpeedController> RobotMap::driveBaseSpeedControllerLeft;
std::shared_ptr<SpeedController> RobotMap::driveBaseSpeedControllerRight;
std::shared_ptr<RobotDrive> RobotMap::driveBaseRobotDrive;
std::shared_ptr<Servo> RobotMap::gearCatcherGearServo1;
std::shared_ptr<SpeedController> RobotMap::climberSpeedControllerClimber;
std::shared_ptr<CANTalon> RobotMap::shooterCANTalonShooterTop;
std::shared_ptr<CANTalon> RobotMap::shooterCANTalonShooterBottom;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    LiveWindow *lw = LiveWindow::GetInstance();

    driveBaseSpeedControllerLeft.reset(new Talon(0));
    lw->AddActuator("DriveBase", "SpeedControllerLeft", std::static_pointer_cast<Talon>(driveBaseSpeedControllerLeft));
    
    driveBaseSpeedControllerRight.reset(new Talon(1));
    lw->AddActuator("DriveBase", "SpeedControllerRight", std::static_pointer_cast<Talon>(driveBaseSpeedControllerRight));
    
    driveBaseRobotDrive.reset(new RobotDrive(driveBaseSpeedControllerLeft, driveBaseSpeedControllerRight));
    
    driveBaseRobotDrive->SetSafetyEnabled(true);
        driveBaseRobotDrive->SetExpiration(0.1);
        driveBaseRobotDrive->SetSensitivity(0.5);
        driveBaseRobotDrive->SetMaxOutput(1.0);

    gearCatcherGearServo1.reset(new Servo(2));
    lw->AddActuator("GearCatcher", "GearServo1", gearCatcherGearServo1);
    
    climberSpeedControllerClimber.reset(new Talon(3));
    lw->AddActuator("Climber", "SpeedControllerClimber", std::static_pointer_cast<Talon>(climberSpeedControllerClimber));
    
    shooterCANTalonShooterTop.reset(new CANTalon(1));
    lw->AddActuator("Shooter", "CANTalonShooterTop", shooterCANTalonShooterTop);
    
    shooterCANTalonShooterBottom.reset(new CANTalon(2));
    lw->AddActuator("Shooter", "CANTalonShooterBottom", shooterCANTalonShooterBottom);
    


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
