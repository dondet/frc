// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Robot.h"
#include "Commands/CmdAutoDrive.h"
#include "Commands/CmdAutoTurn.h"
#include <iostream>
#include "Commands/CmdMiddleSwitchLeft.h"
#include "Commands/CmdRightSwitchRight.h"
#include "Commands/CmdLeftSwitchLeft.h"
#include "Commands/CmdMiddleSwitchRight.h"
#include "Util/AutonomousSelector.h"
#include "Util/GameData.h"


std::shared_ptr<SubDriveBase> Robot::subDriveBase;
std::shared_ptr<SubIntake> Robot::subIntake;
std::unique_ptr<OI> Robot::oi;
std::shared_ptr<SubEncodedArm> Robot::subEncodedArm;

void Robot::RobotInit() {
	RobotMap::init();
    subDriveBase.reset(new SubDriveBase());
    subIntake.reset(new SubIntake());
    subEncodedArm.reset(new SubEncodedArm());
	// This MUST be here. If the OI creates Commands (which it very likely
	// will), constructing it during the construction of CommandBase (from
	// which commands extend), subsystems are not guaranteed to be
	// yet. Thus, their requires() statements may grab null pointers. Bad
	// news. Don't move it.
	oi.reset(new OI());

	// Add commands to Autonomous Sendable Chooser


	chooser.AddDefault("Autonomous Command", new AutonomousCommand());
	frc::SmartDashboard::PutData("Auto Modes", &chooser);
}

/**
 * This function is called when the disabled button is hit.
 * You can use it to reset subsystems before shutting down.
 */
void Robot::DisabledInit(){

}

void Robot::DisabledPeriodic() {
	frc::Scheduler::GetInstance()->Run();
}

void Robot::AutonomousInit() {
	subDriveBase->ResetEncoder();
	subDriveBase->ResetNavX();
	AutonomousSelector autoSel;
	GameData gamedata;
	autoSel.DetermineRoutine(gamedata)->Start();
}

void Robot::AutonomousPeriodic() {
	frc::Scheduler::GetInstance()->Run();
}

void Robot::TeleopInit() {
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to
	// continue until interrupted by another command, remove
	// these lines or comment it out.
	if (autonomousCommand != nullptr)
		autonomousCommand->Cancel();
}

void Robot::TeleopPeriodic() {
	frc::Scheduler::GetInstance()->Run();
}

START_ROBOT_CLASS(Robot);

