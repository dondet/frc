// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"
#include "CANTalon.h"

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

#include "WPILib.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<CANTalon> RobotMap::subDrivebaseCANTalonLeft;
std::shared_ptr<CANTalon> RobotMap::subDrivebaseCANTalonRight;
std::shared_ptr<RobotDrive> RobotMap::subDrivebaseDRV;
std::shared_ptr<DoubleSolenoid> RobotMap::subGearPusherSlnGearPusher;
std::shared_ptr<DoubleSolenoid> RobotMap::subGearPusherSlnGearPusherDoor;
std::shared_ptr<CANTalon> RobotMap::subClimberCANTalonLeftClimb;
std::shared_ptr<CANTalon> RobotMap::subClimberCANTalonRightClimb;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

std::shared_ptr<CANTalon> RobotMap::subDrivebaseCANTalonLeftDiciple;
std::shared_ptr<CANTalon> RobotMap::subDrivebaseCANTalonRightDiciple;

void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    LiveWindow *lw = LiveWindow::GetInstance();

    subDrivebaseCANTalonLeft.reset(new CANTalon(1));
    lw->AddActuator("SubDrivebase", "CANTalonLeft", subDrivebaseCANTalonLeft);
    
    subDrivebaseCANTalonRight.reset(new CANTalon(3));
    lw->AddActuator("SubDrivebase", "CANTalonRight", subDrivebaseCANTalonRight);
    
    subDrivebaseDRV.reset(new RobotDrive(subDrivebaseCANTalonLeft, subDrivebaseCANTalonRight));
    
    subDrivebaseDRV->SetSafetyEnabled(true);
        subDrivebaseDRV->SetExpiration(0.1);
        subDrivebaseDRV->SetSensitivity(0.5);
        subDrivebaseDRV->SetMaxOutput(1.0);

    subGearPusherSlnGearPusher.reset(new DoubleSolenoid(0, 1));
    lw->AddActuator("SubGearPusher", "SlnGearPusher", subGearPusherSlnGearPusher);
    
    subGearPusherSlnGearPusherDoor.reset(new DoubleSolenoid(2, 3));
    lw->AddActuator("SubGearPusher", "SlnGearPusherDoor", subGearPusherSlnGearPusherDoor);
    
    subClimberCANTalonLeftClimb.reset(new CANTalon(5));
    lw->AddActuator("SubClimber", "CANTalonLeftClimb", subClimberCANTalonLeftClimb);
    
    subClimberCANTalonRightClimb.reset(new CANTalon(6));
    lw->AddActuator("SubClimber", "CANTalonRightClimb", subClimberCANTalonRightClimb);
    


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    subDrivebaseCANTalonLeftDiciple.reset(new CANTalon(2));
    lw->AddActuator("SubDrivebase", "CANTalonLeftDiciple", subDrivebaseCANTalonLeftDiciple);
    subDrivebaseCANTalonLeftDiciple->SetControlMode(CANSpeedController::kFollower);
    subDrivebaseCANTalonLeftDiciple->Set(1);
    subDrivebaseCANTalonRightDiciple.reset(new CANTalon(4));
    lw->AddActuator("SubDrivebase", "CANTalonRightDiciple", subDrivebaseCANTalonRightDiciple);
 	subDrivebaseCANTalonRightDiciple->SetControlMode(CANSpeedController::kFollower);
    subDrivebaseCANTalonRightDiciple->Set(3);

}
